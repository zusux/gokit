// Code generated by protoc-gen-tag. DO NOT EDIT.
package api

type InvokeReqTag struct {
	ServiceId   uint32            `json:"service_id,omitempty"`
	MethodId    uint32            `json:"method_id,omitempty"`
	Headers     map[string]string `json:"headers,omitempty"`
	PayloadJson string            `json:"payload_json,omitempty"`
}

func (x *InvokeReq) ToInvokeReqTag() *InvokeReqTag {
	if x == nil {
		return nil
	}
	return &InvokeReqTag{
		ServiceId:   x.ServiceId,
		MethodId:    x.MethodId,
		Headers:     x.Headers,
		PayloadJson: x.PayloadJson,
	}
}
func (x *InvokeReqTag) ToInvokeReq() *InvokeReq {
	if x == nil {
		return nil
	}
	return &InvokeReq{
		ServiceId:   x.ServiceId,
		MethodId:    x.MethodId,
		Headers:     x.Headers,
		PayloadJson: x.PayloadJson,
	}
}

type InvokeRespTag struct {
	Code        int32  `json:"code,omitempty"`
	Message     string `json:"message,omitempty"`
	PayloadJson string `json:"payload_json,omitempty"`
}

func (x *InvokeResp) ToInvokeRespTag() *InvokeRespTag {
	if x == nil {
		return nil
	}
	return &InvokeRespTag{
		Code:        x.Code,
		Message:     x.Message,
		PayloadJson: x.PayloadJson,
	}
}
func (x *InvokeRespTag) ToInvokeResp() *InvokeResp {
	if x == nil {
		return nil
	}
	return &InvokeResp{
		Code:        x.Code,
		Message:     x.Message,
		PayloadJson: x.PayloadJson,
	}
}

type EndpointTag struct {
	App         string                 `json:"app" bson:"app"`
	ServiceId   uint32                 `json:"service_id" bson:"service_id"`
	Host        string                 `json:"host" bson:"host"`
	Auth        *AuthTag               `json:"auth" bson:"auth"`
	AllowOrigin string                 `json:"allow_origin" bson:"allow_origin"`
	Rate        *RateTag               `json:"rate" bson:"rate"`
	Timeout     int64                  `json:"timeout" bson:"timeout"`
	HttpTarget  []*TargetTag           `json:"http_target" bson:"http_target"`
	GrpcTarget  []*TargetTag           `json:"grpc_target" bson:"grpc_target"`
	Requests    map[string]*RequestTag `json:"requests" bson:"requests"`
}

func (x *Endpoint) ToEndpointTag() *EndpointTag {
	if x == nil {
		return nil
	}
	return &EndpointTag{
		App:         x.App,
		ServiceId:   x.ServiceId,
		Host:        x.Host,
		Auth:        x.Auth.ToAuthTag(),
		AllowOrigin: x.AllowOrigin,
		Rate:        x.Rate.ToRateTag(),
		Timeout:     x.Timeout,
		HttpTarget: func() []*TargetTag {
			out := make([]*TargetTag, len(x.HttpTarget))
			for i, v := range x.HttpTarget {
				out[i] = v.ToTargetTag()
			}
			return out
		}(),
		GrpcTarget: func() []*TargetTag {
			out := make([]*TargetTag, len(x.GrpcTarget))
			for i, v := range x.GrpcTarget {
				out[i] = v.ToTargetTag()
			}
			return out
		}(),
		Requests: func() map[string]*RequestTag {
			out := make(map[string]*RequestTag)
			for k, v := range x.Requests {
				out[k] = v.ToRequestTag()
			}
			return out
		}(),
	}
}
func (x *EndpointTag) ToEndpoint() *Endpoint {
	if x == nil {
		return nil
	}
	return &Endpoint{
		App:         x.App,
		ServiceId:   x.ServiceId,
		Host:        x.Host,
		Auth:        x.Auth.ToAuth(),
		AllowOrigin: x.AllowOrigin,
		Rate:        x.Rate.ToRate(),
		Timeout:     x.Timeout,
		HttpTarget: func() []*Target {
			out := make([]*Target, len(x.HttpTarget))
			for i, v := range x.HttpTarget {
				out[i] = v.ToTarget()
			}
			return out
		}(),
		GrpcTarget: func() []*Target {
			out := make([]*Target, len(x.GrpcTarget))
			for i, v := range x.GrpcTarget {
				out[i] = v.ToTarget()
			}
			return out
		}(),
		Requests: func() map[string]*Request {
			out := make(map[string]*Request)
			for k, v := range x.Requests {
				out[k] = v.ToRequest()
			}
			return out
		}(),
	}
}

type RequestTag struct {
	Router      string       `json:"router" bson:"router"`
	Methods     []string     `json:"methods" bson:"methods"`
	Auth        *AuthTag     `json:"auth" bson:"auth"`
	AllowOrigin string       `json:"allow_origin" bson:"allow_origin"`
	Timeout     int64        `json:"timeout" bson:"timeout"`
	MethodId    uint32       `json:"method_id" bson:"method_id"`
	Rate        *RateTag     `json:"rate" bson:"rate"`
	Robin       string       `json:"robin" bson:"robin"`
	HttpTarget  []*TargetTag `json:"http_target" bson:"http_target"`
	GrpcTarget  []*TargetTag `json:"grpc_target" bson:"grpc_target"`
	Switch      string       `json:"switch" bson:"switch"`
	Http        *HttpTag     `json:"http" bson:"http"`
	Grpc        *GrpcTag     `json:"grpc" bson:"grpc"`
}

func (x *Request) ToRequestTag() *RequestTag {
	if x == nil {
		return nil
	}
	return &RequestTag{
		Router:      x.Router,
		Methods:     x.Methods,
		Auth:        x.Auth.ToAuthTag(),
		AllowOrigin: x.AllowOrigin,
		Timeout:     x.Timeout,
		MethodId:    x.MethodId,
		Rate:        x.Rate.ToRateTag(),
		Robin:       x.Robin,
		HttpTarget: func() []*TargetTag {
			out := make([]*TargetTag, len(x.HttpTarget))
			for i, v := range x.HttpTarget {
				out[i] = v.ToTargetTag()
			}
			return out
		}(),
		GrpcTarget: func() []*TargetTag {
			out := make([]*TargetTag, len(x.GrpcTarget))
			for i, v := range x.GrpcTarget {
				out[i] = v.ToTargetTag()
			}
			return out
		}(),
		Switch: x.Switch,
		Http:   x.Http.ToHttpTag(),
		Grpc:   x.Grpc.ToGrpcTag(),
	}
}
func (x *RequestTag) ToRequest() *Request {
	if x == nil {
		return nil
	}
	return &Request{
		Router:      x.Router,
		Methods:     x.Methods,
		Auth:        x.Auth.ToAuth(),
		AllowOrigin: x.AllowOrigin,
		Timeout:     x.Timeout,
		MethodId:    x.MethodId,
		Rate:        x.Rate.ToRate(),
		Robin:       x.Robin,
		HttpTarget: func() []*Target {
			out := make([]*Target, len(x.HttpTarget))
			for i, v := range x.HttpTarget {
				out[i] = v.ToTarget()
			}
			return out
		}(),
		GrpcTarget: func() []*Target {
			out := make([]*Target, len(x.GrpcTarget))
			for i, v := range x.GrpcTarget {
				out[i] = v.ToTarget()
			}
			return out
		}(),
		Switch: x.Switch,
		Http:   x.Http.ToHttp(),
		Grpc:   x.Grpc.ToGrpc(),
	}
}

type HttpTag struct {
	Protocol string `json:"protocol" bson:"protocol"`
	Method   string `json:"method" bson:"method"`
	Path     string `json:"path" bson:"path"`
	Timeout  int64  `json:"timeout" bson:"timeout"`
}

func (x *Http) ToHttpTag() *HttpTag {
	if x == nil {
		return nil
	}
	return &HttpTag{
		Protocol: x.Protocol,
		Method:   x.Method,
		Path:     x.Path,
		Timeout:  x.Timeout,
	}
}
func (x *HttpTag) ToHttp() *Http {
	if x == nil {
		return nil
	}
	return &Http{
		Protocol: x.Protocol,
		Method:   x.Method,
		Path:     x.Path,
		Timeout:  x.Timeout,
	}
}

type GrpcTag struct {
	Path    string `json:"path" bson:"path"`
	Timeout int64  `json:"timeout" bson:"timeout"`
}

func (x *Grpc) ToGrpcTag() *GrpcTag {
	if x == nil {
		return nil
	}
	return &GrpcTag{
		Path:    x.Path,
		Timeout: x.Timeout,
	}
}
func (x *GrpcTag) ToGrpc() *Grpc {
	if x == nil {
		return nil
	}
	return &Grpc{
		Path:    x.Path,
		Timeout: x.Timeout,
	}
}

type TargetTag struct {
	Uri      string `json:"uri" bson:"uri"`
	Weight   int64  `json:"weight" bson:"weight"`
	Priority int64  `json:"priority" bson:"priority"`
}

func (x *Target) ToTargetTag() *TargetTag {
	if x == nil {
		return nil
	}
	return &TargetTag{
		Uri:      x.Uri,
		Weight:   x.Weight,
		Priority: x.Priority,
	}
}
func (x *TargetTag) ToTarget() *Target {
	if x == nil {
		return nil
	}
	return &Target{
		Uri:      x.Uri,
		Weight:   x.Weight,
		Priority: x.Priority,
	}
}

type RateTag struct {
	Limit float32 `json:"limit" bson:"limit"`
	Burst int64   `json:"burst" bson:"burst"`
}

func (x *Rate) ToRateTag() *RateTag {
	if x == nil {
		return nil
	}
	return &RateTag{
		Limit: x.Limit,
		Burst: x.Burst,
	}
}
func (x *RateTag) ToRate() *Rate {
	if x == nil {
		return nil
	}
	return &Rate{
		Limit: x.Limit,
		Burst: x.Burst,
	}
}

type RegisterRouterReqTag struct {
	RegisterAll bool           `json:"register_all" bson:"register_all"`
	Endpoints   []*EndpointTag `json:"endpoints,omitempty"`
}

func (x *RegisterRouterReq) ToRegisterRouterReqTag() *RegisterRouterReqTag {
	if x == nil {
		return nil
	}
	return &RegisterRouterReqTag{
		RegisterAll: x.RegisterAll,
		Endpoints: func() []*EndpointTag {
			out := make([]*EndpointTag, len(x.Endpoints))
			for i, v := range x.Endpoints {
				out[i] = v.ToEndpointTag()
			}
			return out
		}(),
	}
}
func (x *RegisterRouterReqTag) ToRegisterRouterReq() *RegisterRouterReq {
	if x == nil {
		return nil
	}
	return &RegisterRouterReq{
		RegisterAll: x.RegisterAll,
		Endpoints: func() []*Endpoint {
			out := make([]*Endpoint, len(x.Endpoints))
			for i, v := range x.Endpoints {
				out[i] = v.ToEndpoint()
			}
			return out
		}(),
	}
}

type AuthTag struct {
	AuthSkip bool   `json:"auth_skip" bson:"auth_skip"`
	Secret   string `json:"secret" bson:"secret"`
	TokenKey string `json:"token_key" bson:"token_key"`
}

func (x *Auth) ToAuthTag() *AuthTag {
	if x == nil {
		return nil
	}
	return &AuthTag{
		AuthSkip: x.AuthSkip,
		Secret:   x.Secret,
		TokenKey: x.TokenKey,
	}
}
func (x *AuthTag) ToAuth() *Auth {
	if x == nil {
		return nil
	}
	return &Auth{
		AuthSkip: x.AuthSkip,
		Secret:   x.Secret,
		TokenKey: x.TokenKey,
	}
}

type RegisterRouterRespTag struct {
	Code        int32  `json:"code,omitempty"`
	Message     string `json:"message,omitempty"`
	PayloadJson string `json:"payload_json,omitempty"`
}

func (x *RegisterRouterResp) ToRegisterRouterRespTag() *RegisterRouterRespTag {
	if x == nil {
		return nil
	}
	return &RegisterRouterRespTag{
		Code:        x.Code,
		Message:     x.Message,
		PayloadJson: x.PayloadJson,
	}
}
func (x *RegisterRouterRespTag) ToRegisterRouterResp() *RegisterRouterResp {
	if x == nil {
		return nil
	}
	return &RegisterRouterResp{
		Code:        x.Code,
		Message:     x.Message,
		PayloadJson: x.PayloadJson,
	}
}
