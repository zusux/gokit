// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: gserver/invoke/api/router.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationInvokeRouterInvoke = "/invoke.InvokeRouter/Invoke"

type InvokeRouterHTTPServer interface {
	Invoke(context.Context, *InvokeReq) (*InvokeResp, error)
}

func RegisterInvokeRouterHTTPServer(s *http.Server, srv InvokeRouterHTTPServer) {
	r := s.Route("/")
	r.GET("/grpc/invoke", _InvokeRouter_Invoke0_HTTP_Handler(srv))
}

func _InvokeRouter_Invoke0_HTTP_Handler(srv InvokeRouterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InvokeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInvokeRouterInvoke)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Invoke(ctx, req.(*InvokeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InvokeResp)
		return ctx.Result(200, reply)
	}
}

type InvokeRouterHTTPClient interface {
	Invoke(ctx context.Context, req *InvokeReq, opts ...http.CallOption) (rsp *InvokeResp, err error)
}

type InvokeRouterHTTPClientImpl struct {
	cc *http.Client
}

func NewInvokeRouterHTTPClient(client *http.Client) InvokeRouterHTTPClient {
	return &InvokeRouterHTTPClientImpl{client}
}

func (c *InvokeRouterHTTPClientImpl) Invoke(ctx context.Context, in *InvokeReq, opts ...http.CallOption) (*InvokeResp, error) {
	var out InvokeResp
	pattern := "/grpc/invoke"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInvokeRouterInvoke))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
