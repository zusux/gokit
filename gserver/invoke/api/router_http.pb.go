// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: gserver/invoke/api/router.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationInternalRouterInvoke = "/internal.InternalRouter/Invoke"
const OperationInternalRouterRegisterRouter = "/internal.InternalRouter/RegisterRouter"

type InternalRouterHTTPServer interface {
	Invoke(context.Context, *InvokeReq) (*InvokeResp, error)
	RegisterRouter(context.Context, *RegisterRouterReq) (*RegisterRouterResp, error)
}

func RegisterInternalRouterHTTPServer(s *http.Server, srv InternalRouterHTTPServer) {
	r := s.Route("/")
	r.GET("/grpc/invoke", _InternalRouter_Invoke0_HTTP_Handler(srv))
	r.GET("/app/register_router", _InternalRouter_RegisterRouter0_HTTP_Handler(srv))
}

func _InternalRouter_Invoke0_HTTP_Handler(srv InternalRouterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InvokeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInternalRouterInvoke)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Invoke(ctx, req.(*InvokeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InvokeResp)
		return ctx.Result(200, reply)
	}
}

func _InternalRouter_RegisterRouter0_HTTP_Handler(srv InternalRouterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRouterReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInternalRouterRegisterRouter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterRouter(ctx, req.(*RegisterRouterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterRouterResp)
		return ctx.Result(200, reply)
	}
}

type InternalRouterHTTPClient interface {
	Invoke(ctx context.Context, req *InvokeReq, opts ...http.CallOption) (rsp *InvokeResp, err error)
	RegisterRouter(ctx context.Context, req *RegisterRouterReq, opts ...http.CallOption) (rsp *RegisterRouterResp, err error)
}

type InternalRouterHTTPClientImpl struct {
	cc *http.Client
}

func NewInternalRouterHTTPClient(client *http.Client) InternalRouterHTTPClient {
	return &InternalRouterHTTPClientImpl{client}
}

func (c *InternalRouterHTTPClientImpl) Invoke(ctx context.Context, in *InvokeReq, opts ...http.CallOption) (*InvokeResp, error) {
	var out InvokeResp
	pattern := "/grpc/invoke"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInternalRouterInvoke))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InternalRouterHTTPClientImpl) RegisterRouter(ctx context.Context, in *RegisterRouterReq, opts ...http.CallOption) (*RegisterRouterResp, error) {
	var out RegisterRouterResp
	pattern := "/app/register_router"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInternalRouterRegisterRouter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
