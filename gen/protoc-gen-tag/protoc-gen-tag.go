// protoc-gen-tag: A simple protoc plugin for adding multiple struct tags
// Usage: protoc --go_out=. --tag_out=bson,yaml,gorm:. your.proto

package main

import (
	"bytes"
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"strings"
)

func main() {
	protogen.Options{}.Run(func(plugin *protogen.Plugin) error {
		tagParam := plugin.Request.GetParameter() // e.g., "bson,yaml,gorm"
		tags := strings.Split(tagParam, ",")

		for _, f := range plugin.Files {
			if !f.Generate {
				continue
			}
			generateFile(plugin, f, tags)
		}
		return nil
	})
}

func generateFile(plugin *protogen.Plugin, file *protogen.File, tags []string) {
	filename := file.GeneratedFilenamePrefix + ".tag.go"
	g := plugin.NewGeneratedFile(filename, file.GoImportPath)

	g.P("// Code generated by protoc-gen-tag. DO NOT EDIT.")
	g.P("package ", file.GoPackageName)

	for _, message := range file.Messages {
		generateMessage(g, message, tags)
	}
}

func generateMessage(g *protogen.GeneratedFile, message *protogen.Message, tags []string) {
	g.P("type ", message.GoIdent.GoName, "WithTag struct {")
	for _, field := range message.Fields {
		tag := buildTag(field, tags)
		fieldType := fieldGoType(field)
		g.P(field.GoName, " ", fieldType, " `", tag, "`")
	}
	g.P("}")
}

func buildTag(field *protogen.Field, tags []string) string {
	var buf bytes.Buffer
	buf.WriteString("protofield:\"" + string(field.Desc.FullName()) + "\"")
	for _, t := range tags {
		if t == "gorm" {
			buf.WriteString(fmt.Sprintf(` %s:"column:%s"`, t, field.Desc.JSONName()))
		} else {
			if field.Desc.HasOptionalKeyword() {
				buf.WriteString(fmt.Sprintf(` %s:"%s,omitempty"`, t, field.Desc.JSONName()))
			} else {
				buf.WriteString(fmt.Sprintf(` %s:"%s"`, t, field.Desc.JSONName()))
			}
		}
	}
	return buf.String()
}

func fieldGoType(field *protogen.Field) string {
	if field.Desc.IsList() {
		// repeated fields (slice)
		elemType := fieldGoTypeNonList(field)
		return "[]" + elemType
	}
	return fieldGoTypeNonList(field)
}

func fieldGoTypeNonList(field *protogen.Field) string {
	if field.Enum != nil || field.Message != nil {
		return field.GoIdent.GoName
	}

	switch field.Desc.Kind() {
	case protoreflect.BoolKind:
		return "bool"
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Sfixed32Kind:
		return "int32"
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind:
		return "int64"
	case protoreflect.Uint32Kind, protoreflect.Fixed32Kind:
		return "uint32"
	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind:
		return "uint64"
	case protoreflect.FloatKind:
		return "float32"
	case protoreflect.DoubleKind:
		return "float64"
	case protoreflect.StringKind:
		return "string"
	case protoreflect.BytesKind:
		return "[]byte"
	default:
		return "interface{}"
	}
}
